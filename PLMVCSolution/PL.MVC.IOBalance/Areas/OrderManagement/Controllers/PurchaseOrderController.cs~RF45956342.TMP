using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

//Business
using PL.Business.Common;
using PL.Business.Dto.IOBalance;
using PL.Business.Interface.IOBalance;

//MVC
using PL.MVC.IOBalance.Controllers;
using PL.MVC.IOBalance.Areas.AdminManagement.Models;
using PL.MVC.IOBalance.Areas.OrderManagement.Models;

using PL.MVC.IOBalance.Infrastructure;
using Infrastructure.Utilities.Extensions;
using LinqKit;
using System.Drawing;
using Infrastructure.Utilities;

namespace PL.MVC.IOBalance.Areas.OrderManagement.Controllers
{
    /// <summary>
    /// </summary>
    public partial class PurchaseOrderController : BaseController
    {
        #region DeclarationAndConstructors
        IInventoryService _inventoryService;
        IOrderService _orderService;
        public PurchaseOrderController(IInventoryService inventoryService,
            IOrderService orderService)
        {
            this._inventoryService = inventoryService;
            this._orderService = orderService;

        }
        #endregion DeclarationAndConstructors

        #region ActionMethods
        public virtual ActionResult Index()
        {
            var model = GetProduct();
            return View(model);
        }

        public virtual ActionResult Test(ProductDto dto)
        {

            string inventory = string.Empty, alertMessage = string.Empty;
            bool isSuccess = true;

            alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
            var jsonResult = new
            {
                isSuccess = isSuccess,
                alertMessage = alertMessage,
                inventory = inventory
            };

            return Json(jsonResult, JsonRequestBehavior.AllowGet);

        }

        public virtual ActionResult AddProduct(ProductDto dto)
        {
            string inventory = string.Empty, alertMessage = string.Empty;
            bool isSuccess = true;

            //List<ProductDto> productsToAdd = new List<ProductDto>();

            if (!dto.IsNull())
            {
                isSuccess = true;
                inventory = this.RenderRazorViewToString(IOBALANCEMVC.OrderManagement.PurchaseOrder.Views._ListOfOrders, dto);
            }
            else
            {
                isSuccess = false;
                Danger("cannot be duplicate with your data");
            }


            alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
            var jsonResult = new
            {
                isSuccess = isSuccess,
                alertMessage = alertMessage,
                inventory = inventory
            };

            return Json(jsonResult, JsonRequestBehavior.AllowGet);
        }

        public virtual ActionResult SaveProduct(
            string productCode,
            string productName,
            string productDesc,
            string productExtension,
            decimal quantity,
            decimal price,
            string size,
            int? unitId,
            int? categoryId,
            int? modelId,
            int? supplierId,
            string remarks)
        {
            var createdBy = 1;
            bool isSuccess = true;
            string alertMessage = string.Empty;
            ProductDto dto = null;
            DateTime dateNow = System.DateTime.Now;

            long? identityProductId = 0;

            var productList = GetProduct().Where(p => p.ProductCode == productCode && p.ProductName == productName && p.ProductDesc == productDesc && p.ProductExtension == p.ProductExtension).FirstOrDefault();

            if (productList.IsNull())
            {
                dto = new ProductDto()
                {
                    ProductCode = productCode,
                    ProductName = productName,
                    ProductDesc = productDesc,
                    ProductExtension = productExtension,
                    Quantity = quantity,
                    Price = price,
                    Size = size,
                    UnitID = unitId,
                    CategoryID = categoryId,
                    ModelID = modelId,
                    IsActive = true,
                    Remarks = remarks,
                    CreatedBy = createdBy,
                    DateCreated = System.DateTime.Now,
                    SupplierID = supplierId
                };
                identityProductId = _inventoryService.SaveProduct(dto);

                if (identityProductId <= 0)
                {
                    isSuccess = false;
                    Danger("Error");
                }
            }
            else
            {
                dto = new ProductDto()
                {
                    ProductID = productList.ProductID,
                    Quantity = quantity,
                    UpdatedBy = createdBy,
                    DateUpdated = System.DateTime.Now,
                    SupplierID = supplierId
                };

                if (!_inventoryService.UpdateProductQty(productList.ProductID, dto))
                {
                    isSuccess = false;
                    Danger("Error");
                }
                else
                {
                    identityProductId = productList.ProductID;
                }
            }

            OrderDto orderDto = new OrderDto()
            {
                OrderId = 0,
                OrderNum = string.Format("{0}{1}", "TEST", 1),
                OrderDetailId = 0,
                BranchId = null,
                CreatedBy = createdBy,
                DateCreated = System.DateTime.Now
            };
            var identityPurchaseOrderId = _orderService.SavePurchaseOrder(orderDto);

            if (identityPurchaseOrderId <= 0)
            {
                isSuccess = false;
                Danger("Error");
            }
            else
            {
                OrderDetailDto orderDetailDto = new OrderDetailDto()
                {
                    ProductId = identityProductId,
                    PurchaseOrderId = identityPurchaseOrderId,
                    SupplierId = dto.SupplierID,
                    OverrideDisplay = dto.OverrideDisplay,
                    OverrideExtDisplay = dto.OverrideExtDisplay
                };

                if (!_orderService.SavePurchaseOrderDetail(orderDetailDto))
                {
                    isSuccess = false;
                    Danger("Error");
                }
                else
                {
                    isSuccess = true;
                    Success("Successfully inserted a product");
                }
            }

            alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
            var jsonResult = new
            {
                isSuccess = isSuccess,
                alertMessage = alertMessage
            };

            return Json(jsonResult, JsonRequestBehavior.AllowGet);


        }

        public virtual ActionResult SaveProductAndPurchaseOrder(ProductDto dto)
        {
            string inventory = string.Empty, alertMessage = string.Empty;
            bool isSuccess = true;


            var createdBy = Session[SessionVariables.UserDetails].GetUserIdFromSession();
            DateTime?dateNow = System.DateTime.Now;
            int PONumber = _orderService.GeneratePONumber();
            string pONumber = string.Format(Constants.POSOFormat, BusinessSettings.CreatePOSONumber(Enums.OrderTypeAbbrev.PO), PONumber == 0 ? 1 : PONumber++);


            long? identityProductId = 0;

            var productList = GetProduct().Where(p => p.ProductCode == dto.ProductCode && p.ProductName == dto.ProductName && p.ProductExtension == dto.ProductExtension).FirstOrDefault();

            if (productList.IsNull())
            {
                dto.CreatedBy = createdBy;
                dto.DateCreated = dateNow;
                dto.ProductID = 0;
                dto.IsActive = true;
                identityProductId = _inventoryService.SaveProduct(dto);

                if (identityProductId <= 0)
                {
                    isSuccess = false;
                    Danger(Messages.ErrorOccuredDuringProcessing);
                }
            }
            else
            {
                dto.UpdatedBy = createdBy;
                dto.DateUpdated = dateNow;

                if (!_inventoryService.UpdateProductQty(productList.ProductID, dto))
                {
                    isSuccess = false;
                    Danger(Messages.ErrorOccuredDuringProcessing);
                }
                else
                {
                    identityProductId = productList.ProductID;
                }
            }

            OrderDto orderDto = new OrderDto()
            {
                OrderId = 0,
                OrderNum = pONumber,
                OrderDetailId = 0,
                BranchId = null,
                CreatedBy = createdBy,
                DateCreated = dateNow
            };
            var identityPurchaseOrderId = _orderService.SavePurchaseOrder(orderDto);

            if (identityPurchaseOrderId <= 0)
            {
                isSuccess = false;
                Danger(Messages.ErrorOccuredDuringProcessing);
            }
            else
            {
                OrderDetailDto orderDetailDto = new OrderDetailDto()
                {
                    ProductId = identityProductId,
                    PurchaseOrderId = identityPurchaseOrderId,
                    SupplierId = dto.SupplierID,
                    OverrideDisplay = dto.OverrideDisplay,
                    OverrideExtDisplay = dto.OverrideExtDisplay
                };

                if (!_orderService.SavePurchaseOrderDetail(orderDetailDto))
                {
                    isSuccess = false;
                }


                if (!_orderService.SaveReportCombination(orderDto, orderDetailDto, Enums.OrderTypeAbbrev.PO.ToString()))
                {
                    isSuccess = false;
                }

                if (!isSuccess)
                {
                    Danger(Messages.ErrorOccuredDuringProcessing);
                }
                else
                {
                    isSuccess = true;
                    var list = GetProduct();
                    inventory = this.RenderRazorViewToString(IOBALANCEMVC.OrderManagement.PurchaseOrder.Views._ListInventory, list);
                    Success(Messages.InsertSuccess);
                }

            }


            alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
            var jsonResult = new
            {
                isSuccess = isSuccess,
                alertMessage = alertMessage,
                inventory = inventory
            };

            return Json(jsonResult, JsonRequestBehavior.AllowGet);
        }

        public virtual ActionResult UpdateProductDetails(ProductDto dto)
        {
            string alertMessage = string.Empty, inventory = string.Empty;
            bool isSuccess = true;
            var createdBy = 1;
            DateTime dateNow = System.DateTime.Now;

            dto.UpdatedBy = createdBy;
            dto.DateUpdated = dateNow;

            if (!_inventoryService.UpdateProductDetails(dto.ProductID, dto))
            {
                isSuccess = false;
                Danger(Messages.ErrorOccuredDuringProcessing);
            }
            else
            {

                isSuccess = true;
                inventory = this.RenderRazorViewToString(IOBALANCEMVC.OrderManagement.PurchaseOrder.Views._ListInventory, GetProduct());
                Success(Messages.UpdateSuccess);
            }

            alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
            var jsonResult = new
            {
                isSuccess = isSuccess,
                alertMessage = alertMessage,
                inventory = inventory
            };
            return Json(jsonResult, JsonRequestBehavior.AllowGet);
        }

        public virtual ActionResult RefreshProductDetails(ProductSearchModel searchModel)
        {
            var model = GetProduct(searchModel);
            return PartialView(IOBALANCEMVC.OrderManagement.PurchaseOrder.Views._ListInventory, model);
        }

        public virtual ActionResult SearchProductDetails(ProductSearchModel searchModel)
        {
            var model = GetProduct(searchModel);
            return PartialView(IOBALANCEMVC.OrderManagement.PurchaseOrder.Views._ListInventory, model);
        }

        public virtual ActionResult AddQtyProduct(ProductDto dto, ProductSearchModel searchModel)
        {
            string alertMessage = string.Empty, inventory = string.Empty;
            bool isSuccess = true;

            var branchId = Session[SessionVariables.UserDetails].GetBranchIdFromSession();
            var createdBy = Session[SessionVariables.UserDetails].GetUserIdFromSession();
            var dateNow = System.DateTime.Now;

            int PONumber = _orderService.GeneratePONumber();
            string pONumber = string.Format(Constants.POSOFormat, BusinessSettings.CreatePOSONumber(Enums.OrderTypeAbbrev.PO), PONumber == 0 ? 1 : PONumber++);

            if (!_inventoryService.AddQty(dto))
            {
                isSuccess = false;
                Danger(Messages.ErrorOccuredDuringProcessing);
            }
            else
            {

                OrderDto orderDto = new OrderDto()
                {
                    OrderId = 0,
                    OrderNum = pONumber,
                    OrderDetailId = 0,
                    BranchId = branchId,
                    CreatedBy = createdBy,
                    DateCreated = dateNow
                };
                var identityPurchaseOrderId = _orderService.SavePurchaseOrder(orderDto);

                if (identityPurchaseOrderId <= 0)
                {
                    isSuccess = false;
                    Danger(Messages.ErrorOccuredDuringProcessing);
                }
                else
                {
                    OrderDetailDto orderDetailDto = new OrderDetailDto()
                    {
                        ProductId = dto.ProductID,
                        PurchaseOrderId = identityPurchaseOrderId,
                        SupplierId = dto.SupplierID,
                        OverrideDisplay = dto.OverrideDisplay,
                        OverrideExtDisplay = dto.OverrideExtDisplay
                    };

                    if (!_orderService.SavePurchaseOrderDetail(orderDetailDto))
                    {
                        isSuccess = false;
                        Danger(Messages.ErrorOccuredDuringProcessing);
                    }
                    else
                    {
                        if (!_orderService.SaveReportCombination(orderDto,orderDetailDto,Enums.OrderTypeAbbrev.PO))
                        {
                            
                        }
                        isSuccess = true;
                        var list = GetProduct(searchModel);
                        inventory = this.RenderRazorViewToString(IOBALANCEMVC.OrderManagement.PurchaseOrder.Views._ListInventory, list);
                        Success(Messages.UpdateSuccess);
                    }
                }

            }



            alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
            var jsonResult = new
            {
                isSuccess = isSuccess,
                alertMessage = alertMessage,
                inventory = inventory
            };
            return Json(jsonResult, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public virtual ActionResult UploadProductImage(ProductDto dto)
        {
            string alertMessage = string.Empty;
            bool isSuccess = true;
            HttpPostedFileBase file;

            alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
            var jsonResult = new
            {
                isSuccess = isSuccess,
                alertMessage = alertMessage
            };

            try
            {
                file = Request.Files[0];
            }
            catch (Exception e)
            {
                isSuccess = false;
                Danger(Messages.NoSelectedFile);
                alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
                jsonResult = new
                {
                    isSuccess = isSuccess,
                    alertMessage = alertMessage
                };
                return Json(jsonResult, JsonRequestBehavior.AllowGet);
            }

            if (file.ContentLength != 0)
            {
                var dir = Server.MapPath(string.Format("~/{0}", Constants.ProductImageContentDir));
                var fileName = string.Format("{0}{1}{2}", dto.ProductID, DateTime.Now.ToString("MMddyyyy"), System.IO.Path.GetExtension(file.FileName));
                var path = System.IO.Path.Combine(dir, fileName);
                var img = Image.FromStream(file.InputStream);

                dto.ProductImage = fileName;
                if (!_inventoryService.UpdateProductImage(dto.ProductID, dto))
                {
                    isSuccess = false;
                    Danger(Messages.ErrorOccuredDuringProcessing);
                    alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
                    jsonResult = new
                    {
                        isSuccess = isSuccess,
                        alertMessage = alertMessage
                    };
                    return Json(jsonResult, JsonRequestBehavior.AllowGet);
                }
                else
                {

                    var productDetails = _inventoryService.FindByProductId(dto.ProductID);
                    if (!productDetails.ProductImage.IsNull())
                    {
                        var existingDir = Server.MapPath(string.Format("~/{0}", Constants.ProductImageContentDir));
                        var existingFileName = productDetails.ProductImage;
                        var existingPath = System.IO.Path.Combine(existingDir, existingFileName);
                        System.IO.File.Delete(existingPath);
                    }

                    img = img.Resize(new Size(Constants.ProfilePictureDimensionWidth, Constants.ProfilePictureDimensionHeight));
                    img.Save(path);
                    Success(Messages.UpdateSuccess);
                    alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
                    jsonResult = new
                    {
                        isSuccess = isSuccess,
                        alertMessage = alertMessage
                    };
                    return RedirectToAction(IOBALANCEMVC.OrderManagement.PurchaseOrder.Index());
                }

            }
            else
            {
                isSuccess = false;
                //Danger(Messages.ErrorOccuredDuringProcessing);
                ModelState.AddModelError("ProductImage", Messages.ErrorOccuredDuringProcessing);
                //alertMessage = this.RenderRazorViewToString(IOBALANCEMVC.Shared.Views._Alerts, string.Empty);
                //jsonResult = new
                //{
                //    isSuccess = isSuccess,
                //    alertMessage = alertMessage
                //};
                //return Json(jsonResult, JsonRequestBehavior.AllowGet);
                return View(dto);
            }


            //return Json(jsonResult, JsonRequestBehavior.AllowGet);
        }
        #endregion ActionMethods

        #region PrivateMethods
        private List<ProductDto> GetProduct(ProductSearchModel searchModel = null)
        {
            List<ProductDto> list = new List<ProductDto>();
            if (searchModel.IsNull())
            {
                list = _inventoryService.GetAll().ToList();
            }
            else if ((searchModel.ProductCode.IsNull() &&
                searchModel.ProductName.IsNull() &&
                searchModel.UnitId.IsNull() &&
                searchModel.SupplierId.IsNull() &&
                searchModel.ModelId.IsNull() &&
                searchModel.CategoryId.IsNull()))
            {
                list = _inventoryService.GetAll().ToList();
            }
            else
            {
                var predicate = PredicateBuilder.True<ProductDto>();
                var hasOtherFilter = false;

                if (!searchModel.ProductCode.IsNull())
                {
                    hasOtherFilter = true;
                    predicate = predicate.And(p => p.ProductCode.Contains(searchModel.ProductCode));
                }

                if (!searchModel.ProductName.IsNull())
                {
                    hasOtherFilter = true;
                    predicate = predicate.And(p => p.ProductName.Contains(searchModel.ProductName));
                }

                if (!searchModel.ProductExt.IsNull())
                {
                    hasOtherFilter = true;
                    predicate = predicate.And(p => p.ProductExtension.Contains(searchModel.ProductExt));
                }

                if (!searchModel.CategoryId.IsNull())
                {
                    hasOtherFilter = true;
                    predicate = predicate.And(p => p.CategoryID == searchModel.CategoryId);
                }

                list = _inventoryService.GetAll().AsExpandable().Where(predicate).ToList();
            }



            return list;
        }
        #endregion PrivateMethods

        #region Dispose
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (!_inventoryService.IsNull())
                {
                    _inventoryService = null;
                }

                if (!_orderService.IsNull())
                {
                    _orderService = null;
                }
            }
            base.Dispose(disposing);
        }
        #endregion Dispose


    }
}
